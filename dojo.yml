id: robwaz-dojo

name: ARM Dojo
type: public

award:
  emoji: ðŸ¦¾

description: |
  ARM processors are a competitor to the intel processors most of the dojo focuses on.
  Dominating the mobile computing space, these chips excel at power-efficient processing.
  Recently, ARM processors can also be found in personal computers, with Apple's
  M1 and M2 chips serving as notable examples.

  This is an open-source community dojo exploring the aarch64 architecture.
  Pull requests are welcome! https://github.com/pwncollege/arm-dojo

modules:
  - id: intro-to-arm
    name: Introduction to ARM
    description: |
      Unlike amd64, ARM assembly (aarch64) is a RISC architecture with a small number of fast
      instructions.  This module provides a short crash-course to get familiar with some of
      the key differences in aarch64.  Drawing directly from the "Assembly Crash Course" module
      where possible to highlight differences.
    challenges:
      - id: set-register
        name: Level1
        description: Set a register value.
      - id: set-register-large
        name: Level2
        description: Set a register to a large value.
      - id: line-eq
        name: Level3
        description: Basic arithmetic.
      - id: line-eq-single
        name: Level4
        description: Efficient arithmetic.
      - id: mod
        name: Level5
        description: Perform a modulo operation.
      - id: bitshift
        name: Level6
        description: Perform bitshift operations.
      - id: mem-access
        name: Level7
        description: Loading and storing values.
      - id: mem-access-pair
        name: Level8
        description: Loading and storing pairs.
      - id: pop-push
        name: Level9
        description: Working with the stack.
      - id: reg-swap
        name: Level10
        description: Swapping register values.
      - id: mem-access-array
        name: Level11
        description: Compute a sum from an array.
      - id: mem-access-array-six
        name: Level12
        description: Efficiently compute a sum from an array.
      - id: jumps
        name: Level13
        description: The branch instruction.
      - id: avg
        name: Level14
        description: Write an average function.
      - id: fib
        name: Level15
        description: Write a fib function.
    resources:
      - name: "General Tips"
        type: markdown
        content: |
          The dojo box CPU is amd64 architecture.  Working with a non-native architecture has its own unique challenges.

          The simplest way to interact with these challenges is with a short pwntools script.
          A template you can use is shown below.

          ```
          #!/usr/bin/env python3
          from pwn import *
          context.arch = 'aarch64'

          asm_bytes = asm("""
            PUT YOUR AARCH64 ASSEMBLY HERE
            """)

          with process('/challenge/run') as p:
            p.send(asm_bytes)
            p.stdin.close()
            p.interactive()
          ```

      - name: "Helpful Resources"
        type: markdown
        content: |
          - [Official ARMv8 Documentation](https://developer.arm.com/documentation/den0024/a/)
          - [ARM aarch64 Instruction Set Guide](https://developer.arm.com/documentation/102374/0101/Overview)

  - id: arm-rop
    name: ARM64 ROP
    image: adamdoupe/arm-rop
    description: |
      ARM64 has a number of differences in the calling convention, prologues, and epilogues that cause ROP to be different than on x86_64.

      Because these challenges are running on an x86-64 host, you might need any of the `aarch64-linux-gnu-*` tools, such as `aarch64-linux-gnu-objdump`.

      gdb is now a 2-step process:

        In one terminal / tmux window:

        ```bash
        $ /usr/bin/qemu-aarch64-static -g 1234 /challenge/level-1-0
        ```

        In another:

        ```bash
        $ gdb-multiarch /challenge/level-1-0
        (gdb) target remote localhost:1234
        ```
        
    visibility:
      start: "2024-09-04T20:00:00-07:00"
    challenges:
      - id: level-1-0
        name: level-1-0
        description: |
          The goal of this level is quite simple: redirect control flow to the win function.
      - id: level-1-1
        name: level-1-1
        description: |
          The goal of this level is quite simple: redirect control flow to the win function.
      - id: level-2-0
        name: level-2-0
        description: |
          Now let's see about redirect control flow to multiple functions.
      - id: level-2-1
        name: level-2-1
        description: |
          Now let's see about redirect control flow to multiple functions.
      - id: level-3-0
        name: level-3-0
        description: |
          What about passing arguments to multiple functions?
      - id: level-3-1
        name: level-3-1
        description: |
          What about passing arguments to multiple functions?
      - id: level-3-0-a
        name: level-3-0-a
        description: |
          If you did the last one correctly this should be easy.
      - id: level-3-1-a
        name: level-3-1-a
        description: |
          If you did the last one correctly this should be easy.
      - id: level-4-0
        name: level-4-0
        description: |
          Now, let's just pop stuff
      - id: level-4-1
        name: level-4-1
        description: |
          Now, let's just pop stuff
      - id: static-binary-rop
        name: static-binary-rop
        description: |
          Now that you have the hang of things, how about you pop a statically compiled binary with no inserted gadgets? 
      - id: level-4-1-gcc
        name: level-4-1-gcc
        description: |
          Other compilers are different, let's now do a few levels that are compiled by gcc instead of clang to see the difference.
      - id: level-3-1-a-gcc
        name: hard-level-3-1-a-gcc
        description: |
          It seems that compilers can do very strange things, including breaking things, yet I have faith in the hackers...

    
